// Auto-generated by generate-global-dts.cjs on 2025-08-24T04:45:35.329Z
// Do not edit this file directly. Edit the source files instead.
//    ipcRegistry.cjs
export { };

declare global {
  interface Window {
    /**
     * Extends the global `Window` interface to include the `api` object,
     * which provides methods for interacting with the manga reading list,
     * synchronizing data, handling unmatched entries, and managing UI actions.
     *
     * The `api` object exposes asynchronous methods for fetching and reloading
     * various manga lists, synchronizing data, resolving or removing unmatched entries,
     * and opening developer tools or review windows.
     *
     * It also provides event subscription methods for handling the completion or failure
     * of these operations, allowing callbacks to be registered and unsubscribed.
     */
    api: {
      getMangaSettings: (...args: IpcApiArgs) => IpcApiResponse<SettingsClass>;
      getMangaImage: (...args: IpcApiArgs) => IpcApiResponse<string|null>;
      getHakunekoReadingList: (...args: IpcApiArgs) => IpcApiResponse<Record<string, mangaHakuneko>>;
      getUnmatchedFromReadingList: (...args: IpcApiArgs) => IpcApiResponse<mangaSerieReviewitemObj[]>;
      searchMangaUpdatesSerieByID: IpcApiSearchMangaUpdatesSerieByID;
      searchMangaUpdatesSerieByName: IpcApiSearchMangaUpdatesSerieByName;

      reloadMangaUpdatesReadingList: (...args: IpcApiArgs) => IpcApiResponse<void>;
      reloadMangaReadingList: (...args: IpcApiArgs) => IpcApiResponse<void>;
      reloadHakunekoList: (...args: IpcApiArgs) => IpcApiResponse<void>;
      syncReadingList: (...args: IpcApiArgs) => IpcApiResponse<void>;
      resolveUnmatchedEntry: IpcApiResolveUnmatchedEntry;
      removeUnmatchedEntry: IpcApiRemoveUnmatchedEntry;

      onReloadMangaUpdatesReadingListDone: (callback: IpcCallback) => () => void;
      onReloadMangaUpdatesReadingListFailed: (callback: IpcCallback) => () => void;
      onReloadMangaReadingListDone: (callback: IpcCallback) => () => void;
      onReloadMangaReadingListFailed: (callback: IpcCallback) => () => void;
      onReloadHakunekoListDone: (callback: IpcCallback) => () => void;
      onReloadHakunekoListFailed: (callback: IpcCallback) => () => void;
      onSyncReadingListDone: (callback: IpcCallback) => () => void;
      onSyncReadingListFailed: (callback: IpcCallback) => () => void;
      onResolveUnmatchedEntryDone: (callback: resolveUnmatchedEntryCallback) => () => void;
      onResolveUnmatchedEntryFailed: (callback: resolveUnmatchedEntryCallback) => () => void;
      onRemoveUnmatchedEntryDone: (callback: removeUnmatchedEntryCallback) => () => void;
      onRemoveUnmatchedEntryFailed: (callback: removeUnmatchedEntryCallback) => () => void;

      openReviewWindow: () => void;
      toggleDevTools: () => void;
      openCbzViewer: (...args: IpcApiArgsOpenCbzViewer) => IpcApiResponse<void>;
    },
    viewerAPI: {
      getInitialChapter: () => IpcApiResponse<void>;
      getChapter: (...args: IpcApiArgsGetChapter) => IpcApiResponse<void>;
      onInitialChapterData: (callback: ChapterDataCallback) => () => void;
      onChapterLoaded: (callback: ChapterDataCallback) => () => void;
    }
  }

  /**
   * Callback type for chapter data events.
   *
   * @param data - An object containing chapter data including images, chapter name, chapter list, and current index.
   */
  type ChapterDataCallback = (data: {
    images: string[];
    chapter: string;
    chapterList: string[];
    currentIndex: number;
  }) => void;

  /**
   * Arguments for opening the CBZ viewer.
   *
   * @param record - The manga record to be viewed in the CBZ viewer.
   */
  type IpcApiArgsOpenCbzViewer = [record: mangaHakuneko];

  /**
   * Arguments for getting a chapter.
   * 
   * @param chapterIndex - The index of the chapter to retrieve.
   */
  type IpcApiArgsGetChapter = [chapterIndex: number];

  /**
   * Callback type for generic IPC events.
   *
   * @param args - Arguments passed from the IPC event.
   */
  type IpcCallback = (...args: IpcApiArgs) => void;

  /**
   * Callback type for resolving unmatched entries.
   *
   * @param id - The ID of the unmatched entry.
   * @param selectedEntry - The selected review item object.
   * @param selectedReadingItem - The selected reading item object.
   */
  type resolveUnmatchedEntryCallback = (id: number, selectedEntry: mangaReviewItemObj, selectedReadingItem?: MangaUpdatesSearchSeriesResultEntry[]) => void;

  /**
   * Callback type for removing unmatched entries.
   *
   * @param id - The ID of the unmatched entry.
   */
  type removeUnmatchedEntryCallback = (id: number) => void;

  /**
   * Represents the arguments for searching a Manga Updates series by ID.
   *
   * @property seriesID - The unique identifier of the manga series to search for.
   * @property useCache - Optional boolean indicating whether to use cached data if available.
   */
  type IpcApiArgsSearchMangaUpdatesSerieByID = [seriesID: number, useCache?: boolean];

  /**
   * IPC API method for searching a Manga Updates series by its unique ID.
   *
   * This method accepts arguments defined in `IpcApiArgsSearchMangaUpdatesSerieByID` and returns a promise
   * that resolves to a `MangaUpdatesSeriesResultEntry` object containing the series details.
   *
   * @param args - The arguments for the API method.
   * @returns A promise that resolves to the series details.
   */
  type IpcApiSearchMangaUpdatesSerieByID = (...args: IpcApiArgsSearchMangaUpdatesSerieByID) => IpcApiResponse<MangaUpdatesSeriesResultEntry>;

  /**
   * Represents the arguments for searching a Manga Updates series by name.
   *
   * @property seriesTitle - The title of the manga series to search for.
   * @property useCache - Optional boolean indicating whether to use cached data if available.
   */
  type IpcApiArgsSearchMangaUpdatesSerieByName = [seriesTitle: string, useCache?: boolean];

  /**
   * IPC API method for searching a Manga Updates series by its title.
   *
   * This method accepts arguments defined in `IpcApiArgsSearchMangaUpdatesSerieByName` and returns a promise
   * that resolves to an array of `MangaUpdatesSearchSeriesResultEntry` objects containing the series details.
   *
   * @param args - The arguments for the API method.
   * @returns A promise that resolves to the series details.
   * };
   */
  type IpcApiSearchMangaUpdatesSerieByName = (...args: IpcApiArgsSearchMangaUpdatesSerieByName) => IpcApiResponse<MangaUpdatesSearchSeriesResultEntry[]>;

  /**
   * Represents the arguments for resolving an unmatched manga entry.
   *
   * @property id - The ID of the unmatched entry.
   * @property selectedEntry - The selected review item object.
   * @property selectedReadingItem - The selected reading item object.
   */
  type IpcApiArgsResolveUnmatchedEntry = [id: number, selectedEntry: mangaReviewItemObj, selectedReadingItem?: MangaUpdatesSearchSeriesResultEntry[]];

  /**
   * IPC API method for resolving an unmatched manga entry.
   *
   * This method accepts arguments defined in `IpcApiArgsResolveUnmatchedEntry` and performs the resolution of the unmatched entry.
   *
   * @param args - The arguments for the API method.
   * @returns A promise that resolves when the operation is complete.
   */
  type IpcApiResolveUnmatchedEntry = (...args: IpcApiArgsResolveUnmatchedEntry) => IpcApiResponse<void>;

  /**
   * Represents the arguments for removing an unmatched manga entry.
   *
   * @property id - The ID of the unmatched entry.
   */
  type IpcApiArgsRemoveUnmatchedEntry = [id: number];

  /**
   * IPC API method for removing an unmatched manga entry.
   *
   * This method accepts arguments defined in `IpcApiArgsRemoveUnmatchedEntry` and performs the removal of the unmatched entry.
   *
   * @param args - The arguments for the API method.
   * @returns A promise that resolves when the operation is complete.
   */
  type IpcApiRemoveUnmatchedEntry = (...args: IpcApiArgsRemoveUnmatchedEntry) => IpcApiResponse<void>;

  /**
   * IPC configuration interface for defining the structure and metadata of IPC methods.
   *
   * @property log - Whether to log the IPC call.
   * @property name - The name of the Manga class method to resolve.
   * @property type - The type name for the IPC method.
   * @property parameterType - The type name for the IPC method parameters.
   * @property parameters - The type definition for the IPC method parameters (as a string).
   * @property validateArgs - Function to validate arguments before IPC call.
   * @property requiresResponse - Whether the IPC call expects a response.
   * @property returnType - Expected return type of the IPC call (as a string).
   * @property callbackType - Expected type signature of the callback for event-based IPC channels (as a string).
   */
  interface IpcConfig {
    context: string;
    log?: boolean;
    name?: MangaResolveMethodName;
    type?: string;
    parameterType?: string;
    parameters?: string;
    validateArgs?: (...args: IpcApiArgs) => boolean;
    requiresResponse?: boolean;
    returnType?: string;
    callbackType?: string;
  }

  /**
   * Represents a generic IPC (Inter-Process Communication) API interface.
   *
   * This interface allows dynamic assignment of functions to string keys,
   * where each function can accept any number of arguments of any type and return any value.
   */
  interface IpcApi {
    [key: string]: (...args: any[]) => any;
  }

  /**
   * Represents the arguments passed to IPC API methods.
   *
   * This type is an array of unknown values, allowing for flexibility in the number and types of arguments.
   */
  type IpcApiArgs = unknown[];

  /**
   * Represents the response from an IPC API method.
   *
   * This type is a Promise that resolves to the expected return type of the IPC API method.
   */
  type IpcApiResponse<T> = Promise<T>;
}